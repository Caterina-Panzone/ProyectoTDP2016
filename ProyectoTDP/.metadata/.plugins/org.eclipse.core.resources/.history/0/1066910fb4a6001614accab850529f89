package Juego;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import Obstaculos.*;
import Tanques.*; 

public class Mapa {
	protected Celda[][] matriz;
	
	/**
	 * Constructor de la clase Mapa. 
	 * @param archivo Archivo de donde se cargará el mapa. 
	 * @param logica Referencia a la logica principal. 
	 */
	
	public Mapa(String archivo, Logica logica){
		BufferedReader br = null; 
		try{
			br = new BufferedReader(new FileReader(archivo));
			int fila = Integer.parseInt(br.readLine()); 
			int columna = Integer.parseInt(br.readLine());
			List<Obstaculo> bosque= new LinkedList<Obstaculo>();
			
			matriz = new Celda[fila][columna];
			String [] arr = new String[fila];
			String actual,caracter;
			Celda celda; 
			Obstaculo obst = null; 
			boolean añadirBosque = false;
			
			for(int i=0; i<fila; i++){
				actual = br.readLine(); 
				arr = actual.split(" "); 
				for(int j=0; j<columna; j++){
					caracter = arr[j];
					celda = new Celda(i,j); 
					switch (caracter){
						case "L":{
							obst = new Ladrillo(celda); 
							break; 
						}
						case "A":{
							obst = new Acero(celda); 
							break; 
						}
						case "B":{
							obst = new Arbol(celda); 
							bosque.add(obst);
							añadirBosque=true;
							break; 
						}
						case "H":{
							obst = new Agua(celda); 
							break; 
						}
						case "F":{
							obst = new Aguila(celda,logica);
							break; 
						}
						case "P":{
							obst = null;
							break; 
						}
					}
					celda.setObstaculo(obst); 
					matriz[i][j]=celda; 
					if (obst!=null  && !añadirBosque){
						logica.añadirObstaculo(obst);
					}
					else{
						añadirBosque=false;
					}
				}
			}
			
			logica.añadirBosque(bosque);
			logica.setCantidadBosques(bosque.size());
			
		}catch(IOException e){
			e.printStackTrace();
		}finally{
			try{
				if(br!=null)
					br.close();
			}catch(IOException e){
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * Mueve el tanque de la celda vieja a la celda nueva. 
	 * Se asume que en la celda vieja hay un tanque cargado. 
	 * @param vieja Celda donde esta posicionado el tanque.
	 * @param nueva Celda donde se posicionará el tanque, desvinculandose de la anterior. 
	 */
	
	public void concretarMovimientoTanque(Tanque tanque, Celda nueva){
		// PUEDE DAR EL ERROR DE OBJETO CON IMAGEN NULL. 
		//DA ERROR PORQUE EL TANQUE ES NULO. 
		
		//Tanque tanque = vieja.getTanque();
		Celda vieja = getCelda(tanque.getFila(),tanque.getColumna()); 
		vieja.setTanque(null);
		nueva.setTanque(tanque);
		tanque.setCelda(nueva);
		
		vieja.bloquear(); 
		nueva.desbloquear(); 
		
		tanque.actuar(nueva.getPower());
	}
	
	/**
	 * Devuelve la celda que se encuentra en la fila y columna del mapa. 
	 * @param fila Posicion logica horizontal de la celda buscada. 
	 * @param columna Posicion logica vertical de la celda buscada. 
	 * @return Celda delimitada por fila y columna. 
	 */
	
	public Celda getCelda(int fila, int columna){
		return matriz[fila][columna]; 
	}
	
	/**
	 * Retorna la celda contigua dependiendo de la direcion. 
	 * Si está en los límites del mapa retorna nulo. 
	 * @param celda Celda de la cual se parte para buscar su contigua. 
	 * @param direccion Direccion a la que se desea mover. 
	 * @return Celda contigua a la celda pasada por parametro en la direccion dada. 
	 */
	
	public Celda getCeldaSiguiente(Celda celda,int direccion){
		int fila = celda.getFila(); 
		int columna = celda.getColumna(); 
	
		Celda nueva = null; 
		
		switch(direccion){
			case 3:{//Izquierda
				if(columna-1>=0)
					nueva = getCelda(fila, columna-1); 
			    break; 
		    }
		case 2:{//Derecha
				if(columna+1<cantidadColumnas())
					nueva = getCelda(fila, columna+1); 
				break; 
		    }
		case 1: {//Abajo
				if(fila+1<cantidadFilas())
					nueva = getCelda(fila+1, columna); 
				break; 
			}
		case 0: {//Arriba
				if(fila-1>=0)
					nueva = getCelda(fila-1, columna); 
				break; 
			}
		}
		
		return nueva; 
	}
	
	/**
	 * Establece una pared de acero al redededor de la base, repara todo el 
	 * daño de las paredes de la misma. 
	 * @param logica Referencia a la logica principal. 
	 */
	
	public void protegerAguila(Logica logica){
		int columna = (cantidadColumnas()-1)/2-1; 
		int fila = cantidadFilas()-1; 
		
		setearCeldaAcero(matriz[fila][columna],logica);
		setearCeldaAcero(matriz[fila][columna+2],logica);
		
		fila--; 
		for(int i=0; i<3; i++){
			setearCeldaAcero(matriz[fila][columna+i],logica);
		}
	}
	
	/**
	 * Metodo Auxiliar::
	 * Ubica un acero en la celda pasada por parametro. 
	 * @param celda Celda a la cual se le desea posicionar acero. 
	 * @param logica Referencia a la logica principal. 
	 */
	
	private void setearCeldaAcero(Celda celda, Logica logica){
		if(celda.getObstaculo()!=null){
			celda.getObstaculo().setCelda(null);
			celda.getObstaculo().ponerImagenVacia(); 
			celda.setObstaculo(null); 
		}
		Obstaculo acero = new Acero(celda);
		logica.añadirObstaculo(acero); 
		celda.setObstaculo(acero);
	}
	
	/**
	 * Convierte las paredes de acero que rodean a la base en paredes de ladrillo. 
	 * @param logica Referencia a la logica principal. 
	 */
	
	public void desprotegerAguila(Logica logica){
		int columna = (cantidadColumnas()-1)/2-1; 
		int fila = cantidadFilas()-1; 
		
		setearCeldaLadrillo(matriz[fila][columna],logica);
		setearCeldaLadrillo(matriz[fila][columna+2],logica);
		
		fila--; 
		for(int i=0; i<3; i++){
			setearCeldaLadrillo(matriz[fila][columna+i],logica);
		}
	}
	
	/**
	 * Metodo Auxiliar::
	 * Establece un ladrillo en la celda pasada por parametro, si y solo si 
	 * habia un obstaculo en dicha celda. Caso contrario, no realiza cambio alguno. 
	 * @param celda Celda a la cual se le desea posicionar un ladrillo. 
	 * @param logica Referencia a la logica principal. 
	 */
	
	private void setearCeldaLadrillo(Celda celda, Logica logica){
		if(celda.getObstaculo()!=null){
			celda.getObstaculo().setCelda(null);
			celda.getObstaculo().ponerImagenVacia(); 
			celda.setObstaculo(null); 
			Obstaculo acero = new Ladrillo(celda);
			logica.añadirObstaculo(acero); 
			celda.setObstaculo(acero);
		}
	}
	
	/**
	 * Devuelve la cantidad de filas que tiene el mapa. 
	 * @return Cantidad de filas que posee el mapa. 
	 */
	public int cantidadFilas(){
		return matriz.length; 
	}
	
	/**
	 * Devuelve la cantidad de columnas que tiene el mapa.
	 * @return Cantidad de columnas que posee el mapa. 
	 */
	
	public int cantidadColumnas(){
		return matriz[0].length; 
	}
}